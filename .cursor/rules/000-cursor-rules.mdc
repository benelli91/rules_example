---
description: Use ALWAYS when asked to CREATE A RULE or UPDATE A RULE or taught a lesson from the user that should be retained as a new rule for Cursor
globs: .cursor/rules/*.mdc
alwaysApply: false
---

# Cursor Rules Format

## Core Structure

```mdc
---
description: ACTION when TRIGGER to OUTCOME
globs: *.mdc
---

# Rule Title

## Context
- When to apply this rule
- Prerequisites or conditions

## Requirements
- Concise, actionable items
- Each requirement must be testable
- Do not create duplicate rules ‚Äì verify that a rule with the same purpose does not already exist before creating a new one

## Examples
<example>
Good concise example with explanation
</example>

<example type="invalid">
Invalid concise example with explanation
</example>
```

## File Organization

### Location

- Path: `.cursor/rules/`
- Extension: `.mdc`

### Naming Convention

PREFIX-name.mdc where PREFIX is:

- 0XX: Core standards
- 1XX: Tool configs
- 1000-1999: Go language rules and project patterns
- 2000-2999: Framework and architecture rules
- 3000-3999: Testing standards
- 8000-8999: Workflows and processes
- 9000-9999: Templates

### Glob Pattern Examples

Common glob patterns for different rule types:

- Core standards: .cursor/rules/*.mdc
- Go source files: **/*.go
- Go test files: **/*_test.go
- Hexagonal delivery layer: internal/domain/*/delivery/*.go
- Hexagonal entity layer: internal/domain/*/entity/*.go
- Hexagonal service layer: internal/domain/*/service/*.go
- Hexagonal usecase layer: internal/domain/*/usecase/*.go
- Hexagonal repository layer: internal/domain/*/repository/*.go
- Infrastructure layer: internal/infrastructure/**/*.go
- Utilities: internal/util/*.go
- Main applications: cmd/**/*.go
- Migrations: migrations/**/*.sql
- Configuration files: **/*.json
- Documentation: **/*.md
- Mock files: **/mocks/*.go

## Required Fields

### Frontmatter

- description: ACTION TRIGGER OUTCOME format
- globs: `glob pattern for files and folders`

### Body

- <version>X.Y.Z</version>
- context: Usage conditions
- requirements: Actionable items
- examples: Both valid and invalid

## Formatting Guidelines

- Use Concise Markdown primarily
- All rules must be written in English for consistency and clarity
- XML tags limited to:

  - <example>
  - <danger>
  - <required>
  - <rules>
  - <rule>
  - <critical>
  - <version>
- Always indent content within XML or nested XML tags by 2 spaces
- Keep rules as short as possible
- Use Go-specific examples and terminology
- Use emojis where appropriate: üèóÔ∏è üß™ ‚ö° üîß üìù üö® ‚úÖ ‚ùå
- Keep examples focused on hexagonal architecture patterns

## Hexagonal Architecture Context

When creating rules for this project, consider:

- **Domain Layer**: Business logic, entities, use cases
- **Infrastructure Layer**: External concerns, databases, HTTP
- **Application Layer**: Coordination, configuration, dependencies
- **Ports & Adapters**: Interfaces between layers



## AI Optimization Tips

1. Use precise, deterministic ACTION TRIGGER OUTCOME format in descriptions
2. Provide concise positive and negative example of rule application in practice
3. Optimize for AI context window efficiency
4. Remove any non-essential or redundant information
5. Use standard glob patterns without quotes


## Go-Specific Optimization

1. Use precise Go terminology (structs, interfaces, packages)
2. Provide examples with proper Go formatting
3. Reference project-specific patterns (service layers, repositories)
4. Include import organization examples
5. Use standard Go testing patterns with testify

## AI Context Efficiency

1. Keep frontmatter description under 120 characters (or less) while maintaining clear intent for rule selection by AI AGent
2. Limit examples to essential patterns only
3. Focus on Go idioms and hexagonal architecture patterns
4. Use project structure references (internal/domain/*, cmd/*)
5. Maintain high information density
6. Include KYC enforcement domain context when relevant
7. Focus on machine-actionable instructions over human explanations

<critical>
  - NEVER include verbose explanations or redundant context that increases AI token overhead
  - Keep file as short and to the point as possible BUT NEVER at the expense of sacrificing rule impact and usefulness for the AI Agent.
  - ALWAYS use Go syntax in examples
  - Reference hexagonal architecture layers appropriately
  - Consider KYC enforcement business domain in rule context
  - Keep rules actionable for this specific project structure
  - Keep file as short and to the point as possible BUT NEVER at the expense of sacrificing rule impact and usefulness for the AI Agent
  - The front matter can ONLY have the fields description and globs
</critical>