---
description: Create JIRA tickets via REST API v3 from markdown task files with structured content
globs: **/*.mdc
---

# Generic Jira API Integration Assistant

<version>1.0.0</version>
## Context
- Direct integration with Jira Cloud REST API v3 for ticket creation
- Follows 9001-jira-task-generator format patterns for task generation
- Uses Atlassian authentication for private repositories
- Can be invoked automatically from 9001-jira-task-generator after .md file generation
- Creates complete descriptions with all required sections (What?, How?, Why?, Dependencies)
- Includes acceptance criteria as structured section in description using ADF format
- Converts Jira ticket references in dependencies to clickable links
- Automated environment configuration with user confirmation before applying changes

## API Configuration

### Base Configuration
- **Base URL**: `https://your-domain.atlassian.net/rest/api/3/`
- **Authentication**: API Token or OAuth 2.0
- **Required Scopes**: `write:jira-work` (Classic) or `write:issue:jira` (Granular)

### Authentication Methods

#### Option 1: API Token (Recommended for private repos)
```bash
# Create base64 encoded token
echo -n "YOUR_EMAIL:YOUR_API_TOKEN" | base64
```

#### Option 2: OAuth 2.0 (For apps)
```bash
# Use OAuth flow for production integrations
curl -X POST https://auth.atlassian.com/oauth/token
```

## API Endpoints

### 1. Create Single Issue
**Endpoint**: `POST /rest/api/3/issue`

```json
{
  "fields": {
    "project": {
      "key": "PROJ"
    },
    "summary": "Lorem ipsum dolor sit amet consectetur",
    "description": {
      "type": "doc",
      "version": 1,
      "content": [
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore."
            }
          ]
        }
      ]
    },
    "issuetype": {
      "name": "Story"
    },
    "priority": {
      "name": "High"
    },
    "labels": ["lorem", "ipsum", "dolor"]
  }
}
```

### 2. Task Creation Options

**Option 1: Parent Story + Associated Sub-tasks**
- Create parent Story with overview/summary
- Create individual Sub-tasks linked to parent Story (use "Sub-task" type, not "Task")
- Parent provides context, sub-tasks contain specific work

**Option 2: Direct Story Creation**
- Create single Story with all content
- Self-contained work item
- No parent-child relationships

### 3. Get Project Metadata
**Endpoint**: `GET /rest/api/3/issue/createmeta`

Query parameters:
- `projectKeys=PROJ`
- `expand=projects.issuetypes.fields`

## Markdown File Requirements

### Expected .md File Structure (9001-jira-task-generator format)

```markdown
# Ticket JIRA: [Task Title]

## ¿Qué hay que hacer?
[Clear, specific description]

## ¿Cómo se va a hacer?
- [Technical step 1]
- [Technical step 2]

## ¿Por qué se va a hacer?
[Business justification]

## Dependencias
- [Dependency 1]
- [Dependency 2]

## DoD (Definition of Done)
- [ ] [Acceptance criteria 1]
- [ ] [Acceptance criteria 2]

---
```

### Validation Rules

Before processing, verify:
- ✅ File has all required sections
- ✅ Sections contain meaningful content (not placeholders)
- ✅ DoD has checkboxes with specific criteria
- ✅ Technical steps are detailed and actionable
- ❌ No time estimations included
- ❌ No vague descriptions

## Implementation Patterns

### Pattern 0: Automatic Integration from 9001-jira-task-generator

When triggered automatically from 9001 after .md file generation:

**Seamless Workflow:**
1. User generates .md file using 9001-jira-task-generator
2. 9001 offers: "¿Deseas crear estos tickets en Jira ahora?"
3. If user accepts → Automatically execute 9003 workflow:
   - Skip Step 1 (file already provided)
   - Continue with environment check, format selection, project selection
   - Execute ticket creation

### Pattern 1: Manual Single Ticket Creation

When user requests: *"Create JIRA ticket for Lorem ipsum dolor sit amet"*

**Step 0**: Check environment variables (JIRA_BASE_URL, JIRA_EMAIL, JIRA_API_TOKEN)
- If missing, guide user through configuration setup
- If present, validate token with API call to /myself endpoint
**Step 0.1**: Token validation
- If token valid (HTTP 200), continue
- If token invalid (HTTP 401/403), guide through token regeneration process
**Step 1**: Request .md file: "Please provide the .md file with task definition (9001-jira-task-generator format)"
**Step 2**: Validate .md file structure and content
**Step 3**: Ask for format: "How do you want to create the task?
   - Option 1: Parent story + associated sub-tasks
   - Option 2: Individual direct story"
**Step 4**: Ask for project key: "For which project? (ex: PROJ, LOREM, IPSUM)"
**Step 5**: Parse .md content and convert to Jira API format (no assignee, no epic, ADF format)
   - Include all sections: What?, How?, Why?, Dependencies
   - Convert DoD items to Acceptance Criteria field
   - Convert Jira ticket references in dependencies to clickable links
**Step 6**: Execute Jira API call with specified project and format
**Step 7**: Ask user about .md file cleanup (keep or delete)

```bash
curl -X POST \
  'https://your-domain.atlassian.net/rest/api/3/issue' \
  -H 'Authorization: Basic [BASE64_TOKEN]' \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d '{
    "fields": {
      "project": {"key": "PROJ"},
      "summary": "Lorem ipsum dolor sit amet consectetur adipiscing",
      "description": {
        "type": "doc",
        "version": 1,
        "content": [
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Qué hay que hacer?"}]
          },
          {
            "type": "paragraph", 
            "content": [{"type": "text", "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Cómo se va a hacer?"}]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Ut enim ad minim veniam quis nostrud"}]}]
              },
              {
                "type": "listItem", 
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Exercitation ullamco laboris nisi ut aliquip"}]}]
              },
              {
                "type": "listItem", 
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Ex ea commodo consequat duis aute irure"}]}]
              },
              {
                "type": "listItem", 
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Dolor in reprehenderit voluptate velit esse"}]}]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Por qué se va a hacer?"}]
          },
          {
            "type": "paragraph",
            "content": [{"type": "text", "text": "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "Dependencias"}]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Nulla facilisi morbi tempus iaculis"}]}]
              },
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "PROJ-123: Sed viverra ipsum nunc aliquet", "marks": [{"type": "link", "attrs": {"href": "https://your-domain.atlassian.net/browse/PROJ-123"}}]}]}]
              }
            ]
          }
        ]
      },
      "issuetype": {"name": "Story"},
      "priority": {"name": "High"},
      "labels": ["lorem", "ipsum", "dolor", "amet"],
      "components": [{"name": "Development"}]
    }
  }'
```

### Pattern 2: Parent Story + Associated Tasks Format

When user selects "Option 1: Parent story + associated tasks":

**Implementation**:
1. Create parent Story with complete description (all sections: What?, Why?, Dependencies) and global DoD as Acceptance Criteria
2. Create individual Sub-tasks for each item in "How?" section with specific descriptions and task-level acceptance criteria
3. Link Sub-tasks to parent Story using `parent` field
4. Convert Jira ticket references in dependencies to clickable links

```bash
# 1. Create Parent Story (Complete description with all sections)
curl -X POST \
  'https://your-domain.atlassian.net/rest/api/3/issue' \
  -H "Authorization: Basic $(echo -n "$JIRA_EMAIL:$JIRA_API_TOKEN" | base64)" \
  -H 'Content-Type: application/json' \
  -d '{
    "fields": {
      "project": {"key": "PROJ"},
      "summary": "[EPIC] Lorem ipsum dolor sit amet consectetur",
      "description": {
        "type": "doc",
        "version": 1,
        "content": [
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Qué hay que hacer?"}]
          },
          {
            "type": "paragraph", 
            "content": [{"type": "text", "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Por qué se va a hacer?"}]
          },
          {
            "type": "paragraph",
            "content": [{"type": "text", "text": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "Dependencias"}]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Duis aute irure dolor in reprehenderit"}]}]
              },
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "PROJ-123: Voluptate velit esse cillum", "marks": [{"type": "link", "attrs": {"href": "https://your-domain.atlassian.net/browse/PROJ-123"}}]}]}]
              }
            ]
          }
        ]
      },
      "issuetype": {"name": "Story"},
      "priority": {"name": "High"},
      "labels": ["lorem", "ipsum", "epic"]
    }
  }'

# 2. Create Associated Sub-tasks (IMPORTANT: Use "Sub-task", not "Task")
curl -X POST \
  'https://your-domain.atlassian.net/rest/api/3/issue' \
  -H "Authorization: Basic $(echo -n "$JIRA_EMAIL:$JIRA_API_TOKEN" | base64)" \
  -H 'Content-Type: application/json' \
  -d '{
    "fields": {
      "project": {"key": "PROJ"},
      "parent": {"key": "PROJ-PARENT-KEY"},
      "summary": "Ut enim ad minim veniam quis nostrud",
      "description": {
        "type": "doc",
        "version": 1,
        "content": [
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Qué hay que hacer?"}]
          },
          {
            "type": "paragraph",
            "content": [{"type": "text", "text": "Exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat duis aute irure dolor."}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Cómo se va a hacer?"}]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "In reprehenderit in voluptate velit esse"}]}]
              },
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Cillum dolore eu fugiat nulla pariatur"}]}]
              },
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Excepteur sint occaecat cupidatat non"}]}]
              }
            ]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Por qué se va a hacer?"}]
          },
          {
            "type": "paragraph",
            "content": [{"type": "text", "text": "Proident, sunt in culpa qui officia deserunt mollit anim id est laborum sed ut perspiciatis."}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "Dependencias"}]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Unde omnis iste natus error sit"}]}]
              },
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "PROJ-124: Voluptatem accusantium doloremque", "marks": [{"type": "link", "attrs": {"href": "https://your-domain.atlassian.net/browse/PROJ-124"}}]}]}]
              }
            ]
          }
        ]
      },
      "issuetype": {"name": "Sub-task"},
      "priority": {"name": "Medium"},
      "labels": ["lorem", "ipsum", "subtask"]
    }
  }'
```

## Error Handling

### Common HTTP Status Codes
- **201 Created**: Issue created successfully
- **400 Bad Request**: Invalid request format or missing required fields
- **401 Unauthorized**: Authentication failed
- **403 Forbidden**: User lacks permissions
- **404 Not Found**: Project or issue type not found

### Specific Error Messages Found in Testing

#### Hierarchy Error
```json
{"errorMessages":[],"errors":{"parentId":"Parent issue type is not appropriate for hierarchy."}}
```
**Solution**: Use "Sub-task" instead of "Task" when creating child issues

#### Description Format Error  
```json
{"errorMessages":[],"errors":{"description":"Operation value must be an Atlassian Document (check Atlassian Document format)"}}
```
**Solution**: Always use ADF (Atlassian Document Format) for descriptions, never plain text

### Required ADF Format for Descriptions

Always use this structure for description field with all required sections:
```json
{
  "description": {
    "type": "doc",
    "version": 1,
    "content": [
      {
        "type": "heading",
        "attrs": {"level": 3},
        "content": [{"type": "text", "text": "¿Qué hay que hacer?"}]
      },
      {
        "type": "paragraph",
        "content": [{"type": "text", "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"}]
      },
      {
        "type": "heading",
        "attrs": {"level": 3},
        "content": [{"type": "text", "text": "¿Cómo se va a hacer?"}]
      },
      {
        "type": "bulletList",
        "content": [
          {
            "type": "listItem",
            "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Sed do eiusmod tempor incididunt"}]}]
          },
          {
            "type": "listItem",
            "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Ut labore et dolore magna aliqua"}]}]
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {"level": 3},
        "content": [{"type": "text", "text": "¿Por qué se va a hacer?"}]
      },
      {
        "type": "paragraph",
        "content": [{"type": "text", "text": "Ut enim ad minim veniam quis nostrud exercitation"}]
      },
      {
        "type": "heading",
        "attrs": {"level": 3},
        "content": [{"type": "text", "text": "Dependencias"}]
      },
      {
        "type": "bulletList",
        "content": [
          {
            "type": "listItem",
            "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Ullamco laboris nisi ut aliquip"}]}]
          },
          {
            "type": "listItem",
            "content": [{"type": "paragraph", "content": [{"type": "text", "text": "PROJ-123: Ex ea commodo consequat", "marks": [{"type": "link", "attrs": {"href": "https://your-domain.atlassian.net/browse/PROJ-123"}}]}]}]
          }
        ]
      }
    ]
  }
}
```

### Acceptance Criteria Implementation

**Strategy**: Include acceptance criteria as a structured section in the description using ADF format, as custom fields may not be available in all Jira configurations.

```json
{
  "type": "heading",
  "attrs": {"level": 3},
  "content": [{"type": "text", "text": "Criterios de Aceptación"}]
},
{
  "type": "bulletList",
  "content": [
    {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Duis aute irure dolor in reprehenderit"}]}]},
    {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Voluptate velit esse cillum dolore"}]}]},
    {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Eu fugiat nulla pariatur excepteur"}]}]}
  ]
}
```

**Note**: DoD items from .md files should be converted to this description section format. If custom acceptance criteria fields are available in your Jira instance, they can be used instead.

### Dependency Links Processing

When processing dependencies from .md files:
1. **Regular dependencies**: Add as plain text bullets
2. **Jira ticket references**: Detect patterns like "PROJECTKEY-123", "PROJECT-456: Description" 
3. **Convert to links**: Format as clickable links using ADF link format:
   ```json
   {
     "type": "text",
     "text": "PROJ-123: Lorem ipsum dolor sit",
     "marks": [{"type": "link", "attrs": {"href": "https://your-domain.atlassian.net/browse/PROJ-123"}}]
   }
   ```

### Response Validation
```json
// Success Response
{
  "id": "10000",
  "key": "PROJ-123", 
  "self": "https://your-domain.atlassian.net/rest/api/3/issue/10000"
}

// Error Response
{
  "errorMessages": [],
  "errors": {
    "project": "project is required"
  }
}
```

## Usage Examples

### Example 1: Create Development Task with Token Validation
```
User: "Create JIRA ticket for Lorem ipsum dolor sit amet feature"

Assistant Response:
1. ✅ Environment variables found
2. 🔍 Verifying token validity...
   - Call to /rest/api/3/myself
   - If HTTP 200 → ✅ Valid token, continuing...
   - If HTTP 401/403 → ❌ Invalid token, starting regeneration process
3. "Please provide the .md file with task definition (9001-jira-task-generator format)"
4. ✅ .md file validated
5. "How do you want to create the task? Option 1: Parent story + sub-tasks, Option 2: Individual direct story"
6. "For which project do you want to create the ticket? (ex: PROJ, LOREM, IPSUM)"
7. Parse .md content and convert to Jira API format (ADF, no assignee or epic)
8. Execute HTTP calls according to selected format
9. "What do you want to do with generated .md files? Keep or delete?"
```

### Example 1.1: Token Invalid Flow
```
User: "Create JIRA ticket for new functionality"

Assistant Response:
1. ✅ Environment variables found
2. 🔍 Verifying token validity...
3. ❌ Invalid or expired token (HTTP 401)

❌ Invalid or expired Jira token

Possible causes:
- Expired token (tokens have expiration dates)
- Manually revoked token
- Incorrect credentials

A new token needs to be generated to continue.

[Opens token page automatically]
[Step-by-step guide for token regeneration]
[.zshrc update]
[New token re-verification]
[Continue normal process]
```

```bash
curl -X POST \
  'https://your-domain.atlassian.net/rest/api/3/issue' \
  -H 'Authorization: Basic [TOKEN]' \
  -H 'Content-Type: application/json' \
  -d '{
    "fields": {
      "project": {"key": "PROJ"},
      "summary": "Lorem ipsum dolor sit amet consectetur adipiscing",
      "description": {
        "type": "doc",
        "version": 1,
        "content": [
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Qué hay que hacer?"}]
          },
          {
            "type": "paragraph",
            "content": [{"type": "text", "text": "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua ut enim ad minim veniam"}]
          },
          {
            "type": "heading", 
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "¿Cómo se va a hacer?"}]
          },
          {
            "type": "bulletList",
            "content": [
              {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Quis nostrud exercitation ullamco laboris"}]}]},
              {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Nisi ut aliquip ex ea commodo consequat"}]}]},
              {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Duis aute irure dolor in reprehenderit"}]}]},
              {"type": "listItem", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Voluptate velit esse cillum dolore"}]}]}
            ]
          },
          {
            "type": "heading",
            "attrs": {"level": 3}, 
            "content": [{"type": "text", "text": "¿Por qué se va a hacer?"}]
          },
          {
            "type": "paragraph",
            "content": [{"type": "text", "text": "Eu fugiat nulla pariatur excepteur sint occaecat cupidatat non proident sunt in culpa"}]
          },
          {
            "type": "heading",
            "attrs": {"level": 3},
            "content": [{"type": "text", "text": "Dependencias"}]
          },
          {
            "type": "bulletList",
            "content": [
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Qui officia deserunt mollit anim id est"}]}]
              },
              {
                "type": "listItem",
                "content": [{"type": "paragraph", "content": [{"type": "text", "text": "PROJ-100: Laborum sed ut perspiciatis", "marks": [{"type": "link", "attrs": {"href": "https://your-domain.atlassian.net/browse/PROJ-100"}}]}]}]
              }
            ]
          }
        ]
      },
      "issuetype": {"name": "Story"},
      "priority": {"name": "Medium"},
      "labels": ["lorem", "ipsum", "dolor", "amet"],
      "components": [{"name": "Development"}]
    }
  }'
```

## Environment Variables Verification

### Pre-execution Check
Before any ticket creation, verify required environment variables:

```bash
# Check if all required variables exist
echo "Checking Jira configuration..."
if [[ -z "$JIRA_BASE_URL" || -z "$JIRA_EMAIL" || -z "$JIRA_API_TOKEN" ]]; then
  echo "❌ Missing Jira environment variables"
  # Guide user through setup
else
  echo "✅ Jira configuration found"
  # Continue with ticket creation
fi
```

### Variables Status Check
```bash
echo "JIRA_BASE_URL: ${JIRA_BASE_URL:-'❌ Not set'}"
echo "JIRA_EMAIL: ${JIRA_EMAIL:-'❌ Not set'}"  
echo "JIRA_API_TOKEN: ${JIRA_API_TOKEN:+✅ Set}"
```

## Automatic Configuration Setup

### When variables are missing, guide user through setup:

1. **Open API Token page**:
```bash
open https://id.atlassian.com/manage-profile/security/api-tokens
```

2. **Auto-write configuration to shell profile**:
```bash
echo "
# Jira API Configuration  
export JIRA_BASE_URL=\"https://your-domain.atlassian.net\"
export JIRA_EMAIL=\"YOUR_EMAIL@domain.com\"
export JIRA_API_TOKEN=\"YOUR_API_TOKEN_HERE\"
# JIRA_PROJECT_KEY is queried dynamically in each creation" >> ~/.zshrc

echo "✅ Base configuration added to ~/.zshrc"
```

3. **Open shell profile for user to customize**:
```bash
open ~/.zshrc
```

4. **Wait for user confirmation**:
```
⚠️  Please update in the .zshrc file that opened:
   - JIRA_EMAIL: Your corporate email  
   - JIRA_API_TOKEN: The token generated in Atlassian

Did you update the values in .zshrc? (type "yes" to continue):
```

5. **After user confirms, reload configuration**:
```bash
echo "🔄 Reloading configuration..."
source ~/.zshrc
echo "✅ Environment variables loaded"
```

## Configuration Template

### Environment Variables
```bash
# Add to your environment (project is queried dynamically)
export JIRA_BASE_URL="https://your-domain.atlassian.net"
export JIRA_EMAIL="YOUR_EMAIL@domain.com" 
export JIRA_API_TOKEN="your-api-token"
# JIRA_PROJECT_KEY is queried in each creation
```

### Editor Settings
Add to your editor configuration:
```json
{
  "jira": {
    "baseUrl": "${JIRA_BASE_URL}",
    "email": "${JIRA_EMAIL}",
    "token": "${JIRA_API_TOKEN}",
    "defaultIssueType": "Story",
    "defaultPriority": "Medium",
    "commonProjects": ["PROJ", "LOREM", "IPSUM", "DOLOR"]
  }
}
```

## Best Practices

### 1. Ticket Quality
- **Always use 9001-jira-task-generator format** as base input
- **Complete descriptions**: Include ALL sections (What?, How?, Why?, Dependencies) in ADF format
- **DoD in description**: Include acceptance criteria as "Criterios de Aceptación" section in description using ADF format
- **Dependencies with links**: Convert Jira ticket references (ex: PROJ-123) to clickable links
- **Specific technical context**: Include architecture details, patterns, etc.
- **Don't assign tickets** (keep without assignee)
- **Don't associate to epics** automatically (manual handling)
- **Complete sub-tasks**: Each sub-task must have complete description with all sections

### 2. API Usage
- Validate response before continuing
- Implement retry logic for temporary errors
- Create individual tickets (no bulk operations)
- Cache project metadata

### 3. Security
- Never commit tokens in code
- Use environment variables for credentials
- Rotate tokens regularly
- Verify minimum necessary permissions
- **Validate token before each operation**: Always verify validity with /myself endpoint
- **Handle expired tokens**: Guide user to regenerate tokens automatically
- **Use descriptive names**: Include date in token names for tracking

### 4. Error Recovery
```bash
# Verify if ticket exists before creating
curl -X GET \
  'https://your-domain.atlassian.net/rest/api/3/search' \
  -H 'Authorization: Basic [TOKEN]' \
  -G \
  -d 'jql=project="PROJ" AND summary~"[SUMMARY_TEXT]"'
```

## Troubleshooting

### Common Issues
1. **401 Unauthorized**: Check API token and email
2. **400 Bad Request**: Validate required fields for issue type
3. **403 Forbidden**: Verify project permissions
4. **Rate Limiting**: Implement exponential backoff

### Debug Commands
```bash
# Test authentication
curl -X GET \
  'https://your-domain.atlassian.net/rest/api/3/myself' \
  -H 'Authorization: Basic [TOKEN]'

# Get project metadata
curl -X GET \
  'https://your-domain.atlassian.net/rest/api/3/project/PROJ' \
  -H 'Authorization: Basic [TOKEN]'
```

## Usage Triggers

Activate this rule when user mentions:
- "create jira ticket"
- "jira api" 
- "generate issue"
- "ticket from md file"
- "create ticket from file"
- "parent + tasks format"
- "individual story"
- References to 9001-jira-task-generator patterns
- Provides .md files for ticket creation
- Automatically triggered from 9001-jira-task-generator when user accepts Jira creation

## Workflow Process

### 1. Environment Variables Check (Always First)
```bash
# Step 1: Check if variables exist
if [[ -z "$JIRA_BASE_URL" || -z "$JIRA_EMAIL" || -z "$JIRA_API_TOKEN" ]]; then
  echo "⚙️ Jira configuration required..."
  # Execute automatic configuration setup
else
  echo "✅ Environment variables found"
  
  # Step 2: Validate token is still valid
  echo "🔍 Verifying token validity..."
  TOKEN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
    "$JIRA_BASE_URL/rest/api/3/myself" \
    -H "Authorization: Basic $(echo -n "$JIRA_EMAIL:$JIRA_API_TOKEN" | base64)")
  
  if [[ "$TOKEN_CHECK" == "200" ]]; then
    echo "✅ Valid token, continuing..."
    # Proceed with ticket creation
  else
    echo "❌ Invalid or expired token (HTTP $TOKEN_CHECK)"
    # Guide user to regenerate token
  fi
fi
```

### 2. Token Regeneration (When Invalid)

When token validation fails, guide user through token renewal:

#### Step 1: Explain the Issue
```
❌ Invalid or expired Jira token

Possible causes:
- Expired token (tokens have expiration dates)
- Manually revoked token
- Incorrect credentials
- Insufficient permissions

A new token needs to be generated to continue.
```

#### Step 2: Open Token Management Page
```bash
open https://id.atlassian.com/manage-profile/security/api-tokens
```

#### Step 3: Guide Token Creation
```
In the page that opened:
1. 🗑️  Delete the previous token (if exists) "Generic Project Tools"
2. ➕ Click "Create API token"
3. 📝 Name: "Generic Project Tools - [CURRENT_DATE]"
4. 📋 Copy the generated new token
```

#### Step 4: Auto-update shell profile with New Token
```bash
# Auto-update existing JIRA_API_TOKEN line in shell profile
echo "🔧 Updating JIRA_API_TOKEN in ~/.zshrc..."

# Comment out old token line
sed -i.bak 's/^export JIRA_API_TOKEN=/# OLD_TOKEN: export JIRA_API_TOKEN=/' ~/.zshrc

# Add new token line
echo "export JIRA_API_TOKEN=\"YOUR_NEW_TOKEN_HERE\"  # Updated $(date +%Y-%m-%d)" >> ~/.zshrc

echo "✅ Token line added to ~/.zshrc"
```

#### Step 5: Open shell profile for user to update token
```bash
open ~/.zshrc
```

#### Step 6: Wait for user confirmation
```
⚠️  In the .zshrc file that opened:
   - Find the line: export JIRA_API_TOKEN="YOUR_NEW_TOKEN_HERE"
   - Replace YOUR_NEW_TOKEN_HERE with the token you copied from Atlassian
   - Save the file

Did you update the token in .zshrc? (type "yes" to continue):
```

#### Step 7: Reload and Re-verify
```bash
echo "🔄 Reloading configuration..."
source ~/.zshrc

echo "🔍 Re-verifying new token..."
TOKEN_CHECK=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
  "$JIRA_BASE_URL/rest/api/3/myself" \
  -H "Authorization: Basic $(echo -n "$JIRA_EMAIL:$JIRA_API_TOKEN" | base64)")

if [[ "$TOKEN_CHECK" == "200" ]]; then
  echo "✅ New token validated correctly"
  echo "🎉 Continuing with ticket creation..."
  # Continue with ticket creation process
else
  echo "❌ New token still not working. Check:"
  echo "- Correct email in JIRA_EMAIL"
  echo "- Token copied completely without spaces"
  echo "- Project permissions in Jira"
  echo "- Correct format: no extra quotes or spaces"
fi
```

### 3. Dynamic Project Selection

Always ask for project key when creating tickets:
- List common projects: "PROJ, LOREM, IPSUM, DOLOR"
- Allow custom project key input
- Validate project exists before creating ticket
- Use project-specific configurations if available

### 4. Markdown File Processing
- Request .md file(s) from user
- Validate file structure and content
- Parse all required sections
- Verify compliance with 9001-jira-task-generator format

### 5. Format Selection and Creation
- Ask user to choose format: Parent+Sub-tasks vs Individual Story
- Convert parsed .md content to appropriate Jira API format
- Execute creation based on selected format:
  - Option 1: Create parent Story + individual Sub-tasks (use "Sub-task" type)
  - Option 2: Create single comprehensive Story
- No assignee assignment (tickets remain unassigned)
- No automatic epic association (handled manually)
- Always use ADF format for descriptions

### 6. Post-Creation Cleanup
After successful ticket creation, ask user about .md file cleanup:

```
✅ All tickets created successfully in Jira!

What do you want to do with the generated .md files?
- 🗑️  Delete .md files (already in Jira)
- 📁 Keep .md files (for future reference)

.md files created during the process:
- lorem-ipsum-task-01.md
- dolor-sit-amet-task-02.md
- [file list]
```

If user chooses to delete:
- Remove all generated .md files
- Confirm deletion completed
- Provide summary of tickets created in Jira

If user chooses to keep:
- Leave files intact
- Provide summary and file locations
- Suggest adding to .gitignore if needed
